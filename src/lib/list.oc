--- union l l': the union of the lists l and l'
union l l' =
  l @ l'

--- reverse l: return the list l in reverse order
reverse l =
  case l of
    [] -> []
    hd :: tl -> (reverse tl) @ [hd]

--- firsts l: return all the elements of the list l except for the last
--- and raise an error if the list is empty
firsts l =
  case l of
    []        -> (error "Can't give the firsts element of an empty list.")
    hd :: []  -> []
    hd :: tl  -> hd :: (firsts tl)

--- last l: return the last element of the list l
--- and raise an error if the list is empty
last l =
  case l of
    []       -> (error "Can't give the last element of an empty list.")
    hd :: [] -> hd
    hd :: tl -> (last tl)

--- range_n b e n: return the list of numbers between b and e with a step of n
range_n b e n =
  case b of
    i when (b = e) -> []
    i -> b :: (range_n (b + n) e n)

--- range b e: return the list of integers between b and e
range b e =
  range_n b e 1

foldl n f l =
  case l of
    [] -> n
    hd :: tl -> (foldl (f n hd) f tl)

--- is_nil l: return True if the list is empty
isnil [] = True
isnil l  = False

--- uncons l: return the first and the last element of the list l in a pair
uncons l =
  ((head l), last l)

--- elem l n: return True if n is an element of l
elem l n =
  case l of
    [] -> False
    hd :: tl when hd = n -> True
    _ :: tl -> (elem tl n)

nub_ l l' =
  case l of
    [] -> []
    hd :: tl when (elem l' hd) -> (nub_ tl l')
    hd :: tl -> hd :: (nub_ tl (hd :: l'))

--- nub l: return the list l without duplicates
nub l =
  nub_ l []

--- length l: return the length of the list l
length l =
  foldl 0 (\x _ -> x + 1) l

index_opt_ l e n =
  case l of
    hd :: tl when hd = e -> (Some n)
    hd :: tl -> (index_opt_ tl e (n + 1))
    [] -> None

--- index_opt l e: return Some the index of the element l in the list l or None
--- if the element is not in the list.
index_opt l e =
  index_opt_ l e 0

--- index l e: return the index of the element l in the list l and raise an error
--- if the element is not in the list.
index l e =
  case index_opt l e of
    Some n -> n
    None -> (error "The element is not in the list.")

mapi_ l i f =
  case l of
    [] -> []
    hd :: tl -> (f i hd) :: (mapi_ tl (i + 1) f)

--- mapi l f: like the map function but with a function that takes two argument
--- where the first one is the index of the second in the list l
mapi l f =
  mapi_ l 0 f

--- make e n: return a list made of n times e
make e n =
  case n of
    0 -> []
    _ -> e :: (make e (n - 1))
