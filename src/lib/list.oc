-- union l l': the union of the lists l and l'
union l l' =
  l @ l'

-- reverse l: return the list l in reverse order
reverse l =
  case l of
    [] -> []
    hd :: tl -> (reverse tl) @ [hd]

-- firsts l: return all the elements of the list l except for the last
firsts l =
  case l of
    []        -> []
    hd :: []  -> []
    hd :: tl  -> hd :: (firsts tl)

-- last l: return the last element of the list l
last l =
  case l of
    hd :: [] -> hd
    hd :: tl -> (last tl)

-- range_n b e n: return the list of numbers between b and e with a step of n
range_n b e n =
  case b of
    i when (b = e) -> []
    i -> b :: (range_n (b + n) e n)

-- range b e: return the list of integers between b and e
range b e =
  range_n b e 1

foldl n f l =
  case l of
    [] -> n
    hd :: tl -> (foldl (f n hd) f tl)

-- is_nil l: return True if the list is empty
isnil [] = True
isnil l  = False

-- uncons l: return the first and the last element of the list l in a pair
uncons l =
  ((head l), last l)

-- elem l n: return True if n is an element of l
elem l n =
  case l of
    [] -> False
    hd :: tl when hd = n -> True
    _ :: tl -> (elem tl n)

nub_ l l' =
  case l of
    [] -> []
    hd :: tl when (elem l' hd) -> (nub_ tl l')
    hd :: tl -> hd :: (nub_ tl (hd :: l'))

-- nub l: return the list l without duplicates
nub l =
  nub_ l []

-- length l: return the length of the list l
length l =
  foldl 0 (\x y -> x + 1) l
