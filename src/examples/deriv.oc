type token
  = PLUS
  | MINUS
  | DIV
  | TIMES
  | LPAR
  | RPAR
  | POW
  | NUM float
  | IDE char list

parse_f f s =
  case s of
    [] -> ([], [])
    (c :: tl) when (f c) -> (c :: l, n) where
      l, n = (parse_f f tl)
    c :: tl -> ([], s)

lexer s =
  case s of
    [] -> []
    ' ' :: tl -> (lexer tl)
    '+' :: tl -> PLUS :: (lexer tl)
    '-' :: tl -> MINUS :: (lexer tl)
    '/' :: tl -> DIV :: (lexer tl)
    '*' :: tl -> TIMES :: (lexer tl)
    '^' :: tl -> POW :: (lexer tl)
    '(' :: tl -> LPAR :: (lexer tl)
    ')' :: tl -> RPAR :: (lexer tl)
    '^' :: tl -> POW :: (lexer tl)
    n :: tl when is_num n ->
      (NUM n) :: l where
        n = (int_of_string ns)
        l = (lexer nl)
        ns, nl = (parse_f is_num s)
    a :: tl when is_alpha a ->
      (IDE i) :: l where
        l = (lexer nl)
        i, nl = (parse_f is_alpha s)

type op
  = Plus
  | Mult
  | Pow
  | Minus
  | Div

type expr
  = Var char list
  | App char list expr
  | Binop expr op expr
  | Const float
  | Null

parse_pow t l =
  case t of
    [] -> (l, [])
    POW :: tl ->
      ((Binop (l, Pow, r)), ntl) where
        r, ntl = (parser tl Null)
    tok -> (l, t)

parse_mul t l =
  case ftl of
    TIMES :: utl -> (parse_mul ftl nl)
    DIV :: utl   -> (parse_mul ftl nl)
    utl          -> (nl, utl)
  where
    nl, ftl =
      case t of
        [] -> (l, [])
        TIMES :: tl ->
          ((Binop (l, Mult, r)), ntl) where
            r, ntl = (parser tl Null)
        DIV :: tl ->
          ((Binop (l, Div, r)), ntl) where
            r, ntl = (parser tl Null)
        tok -> (l, t)

parse_par tokens expr =
  case tokens of
    [] -> (expr, [])
    RPAR :: tl -> (expr, tl)
    t ->
      (parse_par tl e) where
        e, tl = (parser t expr)

parser tokens expr =
  case tokens of
    [] -> (expr, [])
    (NUM n) :: tl -> (Const n, tl)
    (IDE v) :: LPAR :: tl -> (App (v, e), l) where
      e, l = (parse_par tl Null)
    (IDE v) :: tl -> ((Var v), tl)
    TIMES :: tl   -> (parse_mul tokens expr)
    DIV :: tl     -> (parse_mul tokens expr)
    PLUS :: tl    -> (parse_add tokens expr)
    MINUS :: tl   -> (parse_add tokens expr)
    LPAR :: tl    -> (parse_par tl Null)
  where
    parse_add = \t l ->
      case t of
        PLUS :: tl ->
          ((Binop (l, Plus, r)), ntl) where
            r, ntl = (parse_mul mtl nr)
            nr, mtl = (parser tl Null)
        MINUS :: tl ->
          ((Binop (l, Minus, r)), ntl) where
            r, ntl = (parse_mul mtl nr)
            nr, mtl = (parser tl Null)

parse_all tokens expr =
  case tokens of
    [] -> expr
    t ->
      (parse_all tl e) where
        e, tl = (parser t expr)

is_const e v =
  case e of
    Const _ -> True
    (Var x) when (x = v) -> False
    Var _ -> True
    App (_, x) -> (is_const x v)
    Binop (l, _, r) -> (and (is_const l v) (is_const r v))

derivate e v =
  case e of
    e when is_const e v -> (Const 0)
    Var _ -> (Const 1)
    Binop (f, Plus, g) ->
      -- (f(x) + g(x))' = f'(x) + g'(x)
      (Binop (f', Plus, g')) where
        f' = (derivate f v)
        g' = (derivate g v)
    Binop (f, Mult, g) ->
      -- (f(x) * g(x))' = f'g(x) + fg'(x)
      Binop (Binop(g, Mult, f'), Plus, Binop(g', Mult, f)) where
        f' = (derivate f v)
        g' = (derivate g v)
    Binop (f, Div, g) ->
      -- (f(x) / g(x))' =
      Binop (Binop (Binop (g, Mult, f'), Minus, Binop(g', Mult, f)), Div,
      Binop(g, Pow, Const 2)) where
        f' = (derivate f v)
        g' = (derivate g v)
    Binop (f, Pow, g) ->
      Binop (Binop (e, Mult, Binop(f, Pow, Binop (e, Minus, Const 1))), Mult, f')
      where
        f' = (derivate f v)
        g' = (derivate g v)
    App (f, g) ->
      Binop (f'g, Mult, g') where
        g' = (derivate g v)
        f'g =
          case f of
            "sin" -> (App ("cos", g))
            "cos" -> (Binop(App ("sin", g), Mult, Const -1))
            "exp" -> (App ("exp", g))
            "log" -> (Binop (Const 1, Div, g))

free e =
  case e of
    Const _ -> []
    Var v -> [v]
    Binop (l, _, r) -> (free l) @ (free r)
    App (_, x) -> (free x)

string_of_expr e =
  case e of
    Const n -> (string_of_int n)
    Var v -> v
    Binop (l, Plus, r)  -> (string_of_expr l) @ " + " @ (string_of_expr r)
    Binop (l, Minus, r) -> (string_of_expr l) @ " - " @ (string_of_expr r)
    Binop (l, Pow, r)   -> (string_of_expr l) @ " ^ " @ (string_of_expr r)
    Binop (l, Mult, r)  -> (string_of_expr l) @ " * " @ (string_of_expr r)
    Binop (l, Div, r)   -> (string_of_expr l) @ " / " @ (string_of_expr r)
    App (f, x) -> f @ "(" @ (string_of_expr x) @ ")"

simplify e =
  case e of
    Binop (l, Plus, Const 0) -> (simplify l)
    Binop (Const 0, Plus, r) -> (simplify r)
    Binop (l, Mult, Const 1) -> (simplify l)
    Binop (Const 1, Mult, r) -> (simplify r)
    Binop (l, Mult, Const 0) -> (Const 0)
    Binop (Const 0, Mult, r) -> (Const 0)
    Binop (Const l, Plus, Const r) -> (Const (l + r))
    Binop (l, o, r) ->
      (if (or (not (l' = l)) (not (r' = r)))
      (simplify (Binop (simplify l, o, simplify r)))
      (Binop (simplify l, o, simplify r))) where
        l' = (simplify l)
        r' = (simplify r)
    n -> n

main s =
  (map (\x -> "df/d" @ x @ ": " @ (string_of_expr (simplify (derivate e x)))) (nub (free e))) where
    e = (parse_all (lexer s) Null)
