type token
  = LPAR
  | RPAR
  | ARROW
  | LAM
  | EOL
  | EQUAL
  | IDE char list

parse_f f s =
  case s of
    [] -> ([], [])
    (c :: tl) when (f c) -> (c :: l, n) where
      l, n = (parse_f f tl)
    c :: tl -> ([], s)

lexer s =
  case s of
    [] -> []
    ' '  :: tl -> (lexer tl)
    '-'  :: '>' :: tl -> ARROW :: (lexer tl)
    '('  :: tl -> LPAR :: (lexer tl)
    ')'  :: tl -> RPAR :: (lexer tl)
    '\\' :: tl -> LAM :: (lexer tl)
    '\n' :: tl -> EOL :: (lexer tl)
    '='  :: tl -> EQUAL :: (lexer tl)
    a :: tl when is_alpha a ->
      (IDE i) :: l where
        l = (lexer nl)
        i, nl = (parse_f is_alpha s)
    c :: _ -> (error "Unexpected character: " @ [c])

type expr
  = Var char list
  | Lam char list expr
  | App expr expr
  | Deb float

parse_til tokens e del =
  case tokens of
    [] ->
      case e of
        Some expr -> (expr, [])
    c :: tl when c = del ->
      case e of
        Some expr -> (expr, tl)
    (RPAR :: _) ->
       case e of
        Some expr -> (expr, tokens)
    t ->
      (parse_til tl (Some expr) del) where
        expr, tl =
          case e of
            None -> (expr, ntl) where
              expr, ntl = (parse_expr t)
            Some ex -> (App (ex, expr), ntl) where
              expr, ntl = (parse_expr t)

parse_expr tokens =
  case tokens of
    (IDE v) :: tl -> (Var v, tl)
    LAM :: (IDE v) :: ARROW :: tl ->
      (Lam (v, e), t) where
        e, t = (parse_expr tl)
    LPAR :: tl -> (parse_til tl None RPAR)
    _ -> (error "Unexpected token.")

to_deb e v n =
  case e of
    Var var when var = v -> (Deb n)
    App (l, r) -> (App (to_deb l v n, to_deb r v n))
    Lam (var, b) -> (Lam ("", to_deb (to_deb b var 0) v (n + 1)))
    n -> n

string_of_expr e =
  case e of
    Var v -> v
    App (l, r) ->
      "(" @ (string_of_expr l) @ ")" @ "(" @ (string_of_expr r) @ ")"
    Lam ("", e) ->
      "\\" @ (string_of_expr e)
    Lam (v, e) ->
      "\\" @ v @ " -> " @ (string_of_expr e)
    Deb n -> (string_of_int n)

parse_decl t =
  case t of
    (IDE name) :: EQUAL :: tl -> ((name, to_deb e "" -1), ttl) where
      e, ttl = (parse_til tl None EOL)
    _ -> (error "Invalid declaration.")

eval e env ind ctx =
  case e of
    Deb n ->
      if (and ((length env) > (n - ind)) (n - ind > -1)) (env ! (n - ind)) (Deb n)
    App (l, r) ->
      case eval l env ind ctx of
        Lam (_, b) ->
          (eval b (nr :: env) ind ctx) where
            nr = (eval r env ind ctx)
        n -> (App (n, (eval r env ind ctx)))
    Lam (_, b) -> (Lam ("", eval b env (ind + 1) ctx))
    Var n -> (lookup ctx n)
    n -> n

program t d =
  case t of
    [] -> d
    _  -> (program tl (nd :: d)) where
      nd, tl = (parse_decl t)

exec d ctx =
  case d of
    [] -> (error "There is no main function")
    ("main", b) :: _ -> (brack (App(App (b, Var "U"), Var"Z")) ctx)
    hd :: tl -> (exec tl ctx)

free e n =
  case e of
    Var _ -> False
    App (l, r) -> (or (free l n) (free r n))
    Deb v when n = v -> True
    Deb _ -> False
    Lam (_, b) -> (free b (n + 1))
    n -> False

dec_deb e =
  case e of
    Deb n -> (Deb (n - 1))
    App (l, r) -> (App (dec_deb l, dec_deb r))
    Lam (_, b) -> (Lam ("", dec_deb b))
    n -> n

in_lam e =
  case e of
    App (l, r) -> (or (in_lam l) (in_lam r))
    Lam _ -> True
    _ -> False

opt e =
  case e of
    App (App (Var "S", App (Var "K", p)), Var "I") -> p

abs e i =
  case e of
    Deb n when i = n -> (Var "I")
    App (m, n) when (not (or (in_lam m) (in_lam n))) ->
      (App (App (Var "S", abs m i), abs n i))
    n -> (App (Var "K", dec_deb n))

brack e funs =
  case e of
    App (m, n) -> (App (brack m funs, brack n funs))
    Lam (_, b) -> (abs (brack b funs) 0)
    n -> n

arr i e =
  case e of
    Var "S" -> [0]
    Var "K" -> [1]
    Var "U" -> [2]
    Var "Z" -> [3]
    App ((Var _) as l, (Var _) as r) -> (arr i l) @ (arr i r)
    App ((Var _) as l, r) -> (arr i l) @ [i + 2] @ (arr (i + 2) r)
    App (l, (Var _) as r) -> [i + 1] @ (arr (i + 1) l) @ (arr i r)
    App (l, r) -> [i + 2, len] @ f @ (arr len l) where
      len = i + 2 + (length f)
      f   = (arr (i + 2) r)

run s pc =
  case s ! pc of
    1 -> (run s (pc + 1))
    2 -> (1 + (run s (pc + 1)))
    3 -> 0
    n -> (run s n)

run_e e =
  case e of
    App (Var "I", b) -> (run_e b)
    App (App (Var "K", l), _) -> (run_e l)
    App (App (App (Var "S", x), y), z) ->
      (run_e (App(App (x, z'), App(y, z')))) where
        z' = (run_e z)
    App (l, r) ->
      (if (and (l = l') (r = r')) (App (l', r')) (run_e (App (l', r')))) where
        r' = (run_e r)
        l' = (run_e l)
    n -> n

main s =
  (string_of_expr (run_e (exec d d))) where
    d = (program (lexer s) [])
