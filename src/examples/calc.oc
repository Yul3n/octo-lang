open char

type token
  = PLUS
  | MINUS
  | DIV
  | TIMES
  | NUM float

parse_f f s =
  case s of
    [] -> ([], [])
    (c :: tl) when (f c) -> (c :: l, n) where
      l, n = (parse_f f tl)
    c :: tl -> ([], s)

lexer s =
  case s of
    [] -> []
    '+' :: tl -> PLUS :: (lexer tl)
    '-' :: tl -> MINUS :: (lexer tl)
    '/' :: tl -> DIV :: (lexer tl)
    '*' :: tl -> TIMES :: (lexer tl)
    (n :: tl) when (is_num n) ->
      (NUM n) :: l where
        n = (int_of_string ns 0)
        l = (lexer nl)
        ns, nl = (parse_f is_num tl)

main n =
  case (lexer "2") of
    PLUS :: [] -> 2
    (NUM n) :: [] -> 1
