open char

type token
  = PLUS
  | MINUS
  | DIV
  | TIMES
  | NUM float

parse_f f s =
  case s of
    [] -> ([], [])
    (c :: tl) when (f c) -> (c :: l, n) where
      l, n = (parse_f f tl)
    c :: tl -> ([], s)

lexer s =
  case s of
    [] -> []
    ' ' :: tl -> (lexer tl)
    '+' :: tl -> PLUS :: (lexer tl)
    '-' :: tl -> MINUS :: (lexer tl)
    '/' :: tl -> DIV :: (lexer tl)
    '*' :: tl -> TIMES :: (lexer tl)
    (n :: tl) when (is_num n) ->
      (NUM n) :: l where
        n = (int_of_string ns 0)
        l = (lexer nl)
        ns, nl = (parse_f is_num s)

type op
  = Plus
  | Minus
  | Mult
  | Div

type expr
  = Const float
  | Binop expr op expr
  | Null

eval e =
  case e of
    Const n -> n
    Binop (l, Plus, r) ->
      (ln + rn) where
        ln = (eval l)
        rn = (eval r)
    Binop (l, Minus, r) ->
      (ln - rn) where
        ln = (eval l)
        rn = (eval r)
    Binop (l, Mult, r) ->
      (ln * rn) where
        ln = (eval l)
        rn = (eval r)
    Binop (l, Div, r) ->
      (ln / rn) where
        ln = (eval l)
        rn = (eval r)

parse_mul t l =
  case ftl of
    TIMES :: utl -> (parse_mul ftl nl)
    DIV :: utl   -> (parse_mul ftl nl)
    utl          -> (nl, utl)
  where
    nl, ftl =
      case t of
        [] -> (l, [])
        TIMES :: tl ->
          ((Binop (l, Mult, r)), ntl) where
            r, ntl = (parser tl Null)
        DIV :: tl ->
          ((Binop (l, Div, r)), ntl) where
            r, ntl = (parser tl Null)
        tok -> (l, t)

and parser tokens expr =
  case tokens of
    [] -> (expr, [])
    (NUM n) :: tl -> ((Const n), tl)
    TIMES :: tl   -> (parse_mul tokens expr)
    DIV :: tl     -> (parse_mul tokens expr)
    PLUS :: tl    -> (parse_add tokens expr)
  where
    parse_add = \t l ->
      case t of
        PLUS :: tl ->
          ((Binop (l, Plus, r)), ntl) where
            r, ntl = (parse_mul mtl nr)
            nr, mtl = (parser tl Null)
        MINUS :: tl ->
          ((Binop (l, Minus, r)), ntl) where
            r, ntl = (parse_mul mtl nr)
            nr, mtl = (parser tl Null)

parse_all tokens expr =
  case tokens of
    [] -> expr
    t ->
      (parse_all tl e) where
        e, tl = (parser t expr)

main n =
  eval (parse_all (lexer "2 * 3 + 2") Null)
